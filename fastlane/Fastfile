default_platform(:ios)

DEVELOPER_APP_ID = ENV["DEVELOPER_APP_ID"]
DEVELOPER_APP_IDENTIFIER = ENV["DEVELOPER_APP_IDENTIFIER"]
PROVISIONING_PROFILE_SPECIFIER = ENV["PROVISIONING_PROFILE_SPECIFIER"]
TEMP_KEYCHAIN_USER = ENV["TEMP_KEYCHAIN_USER"]
TEMP_KEYCHAIN_PASSWORD = ENV["TEMP_KEYCHAIN_PASSWORD"]
APPLE_API_KEY = ENV["APPLE_API_KEY"]
APPLE_ISSUER_ID = ENV["APPLE_ISSUER_ID"]
APPLE_KEY_ID = ENV["APPLE_KEY_ID"]
GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]

def delete_temp_keychain(name)
  delete_keychain(
    name: name
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0
  )
end

def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  lane :closed_beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_API_KEY,            
      duration: 1200,            
      in_house: false
    )
    
    # increment_build_number(xcodeproj: "MarvelApp.xcodeproj")
    
    cocoapods(
      clean_install: true
    )

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "MarvelApp.xcworkspace",
      scheme: "MarvelApp-Release",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./MarvelApp.ipa"
    )

    version = get_info_plist_value(
      path: options[:scheme]+"-Info.plist",
      key: "CFBundleShortVersionString"
    )
    build = get_info_plist_value(
      path: options[:scheme]+"-Info.plist",
      key: "CFBundleVersion"
    )
    slack(
      message: "Hi! A new iOS "+options[:scheme]+" build has been submitted to TestFlight",
      payload: {
        "Build Date" => Time.new.to_s,
        "Release Version" => version+"."+build
      },
      slack_url: "https://hooks.slack.com/services/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",
      use_webhook_configured_username_and_icon: true,
      fail_on_error: false,
      success: true
    ) 

    delete_temp_keychain(keychain_name)
  end
end